/*
Morty APIs

This document contains the specification of the public-facing Morty APIs. For function invocation, please see the project README here: https://github.com/morty-faas/morty/controller#readme 

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ServerMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerMetadata{}

// ServerMetadata struct for ServerMetadata
type ServerMetadata struct {
	// The version of the Morty server
	Version *string `json:"version,omitempty"`
	// The Git commit the server was built on.
	GitCommit *string `json:"gitCommit,omitempty"`
}

// NewServerMetadata instantiates a new ServerMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerMetadata() *ServerMetadata {
	this := ServerMetadata{}
	return &this
}

// NewServerMetadataWithDefaults instantiates a new ServerMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerMetadataWithDefaults() *ServerMetadata {
	this := ServerMetadata{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ServerMetadata) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerMetadata) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ServerMetadata) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ServerMetadata) SetVersion(v string) {
	o.Version = &v
}

// GetGitCommit returns the GitCommit field value if set, zero value otherwise.
func (o *ServerMetadata) GetGitCommit() string {
	if o == nil || IsNil(o.GitCommit) {
		var ret string
		return ret
	}
	return *o.GitCommit
}

// GetGitCommitOk returns a tuple with the GitCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerMetadata) GetGitCommitOk() (*string, bool) {
	if o == nil || IsNil(o.GitCommit) {
		return nil, false
	}
	return o.GitCommit, true
}

// HasGitCommit returns a boolean if a field has been set.
func (o *ServerMetadata) HasGitCommit() bool {
	if o != nil && !IsNil(o.GitCommit) {
		return true
	}

	return false
}

// SetGitCommit gets a reference to the given string and assigns it to the GitCommit field.
func (o *ServerMetadata) SetGitCommit(v string) {
	o.GitCommit = &v
}

func (o ServerMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.GitCommit) {
		toSerialize["gitCommit"] = o.GitCommit
	}
	return toSerialize, nil
}

type NullableServerMetadata struct {
	value *ServerMetadata
	isSet bool
}

func (v NullableServerMetadata) Get() *ServerMetadata {
	return v.value
}

func (v *NullableServerMetadata) Set(val *ServerMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableServerMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableServerMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerMetadata(val *ServerMetadata) *NullableServerMetadata {
	return &NullableServerMetadata{value: val, isSet: true}
}

func (v NullableServerMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


