/*
Morty Registry - API Documentation

This document aims to provide a simple and clear Morty Function Registry endpoints documentation.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
)


type FunctionsApi interface {

	/*
	V1FunctionsBuildPost Build a function and push the image into the registry.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return FunctionsApiV1FunctionsBuildPostRequest
	*/
	V1FunctionsBuildPost(ctx context.Context) FunctionsApiV1FunctionsBuildPostRequest

	// V1FunctionsBuildPostExecute executes the request
	//  @return string
	V1FunctionsBuildPostExecute(r FunctionsApiV1FunctionsBuildPostRequest) (string, *http.Response, error)

	/*
	V1FunctionsIdGet Get a download link for the image of the given function

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The identifier of the function to upload.
	@return FunctionsApiV1FunctionsIdGetRequest
	*/
	V1FunctionsIdGet(ctx context.Context, id string) FunctionsApiV1FunctionsIdGetRequest

	// V1FunctionsIdGetExecute executes the request
	//  @return string
	V1FunctionsIdGetExecute(r FunctionsApiV1FunctionsIdGetRequest) (string, *http.Response, error)
}

// FunctionsApiService FunctionsApi service
type FunctionsApiService service

type FunctionsApiV1FunctionsBuildPostRequest struct {
	ctx context.Context
	ApiService FunctionsApi
	runtime *string
	name *string
	archive *os.File
}

// The name of the runtime to use.
func (r FunctionsApiV1FunctionsBuildPostRequest) Runtime(runtime string) FunctionsApiV1FunctionsBuildPostRequest {
	r.runtime = &runtime
	return r
}

// The name of the function.
func (r FunctionsApiV1FunctionsBuildPostRequest) Name(name string) FunctionsApiV1FunctionsBuildPostRequest {
	r.name = &name
	return r
}

func (r FunctionsApiV1FunctionsBuildPostRequest) Archive(archive *os.File) FunctionsApiV1FunctionsBuildPostRequest {
	r.archive = archive
	return r
}

func (r FunctionsApiV1FunctionsBuildPostRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.V1FunctionsBuildPostExecute(r)
}

/*
V1FunctionsBuildPost Build a function and push the image into the registry.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return FunctionsApiV1FunctionsBuildPostRequest
*/
func (a *FunctionsApiService) V1FunctionsBuildPost(ctx context.Context) FunctionsApiV1FunctionsBuildPostRequest {
	return FunctionsApiV1FunctionsBuildPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *FunctionsApiService) V1FunctionsBuildPostExecute(r FunctionsApiV1FunctionsBuildPostRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FunctionsApiService.V1FunctionsBuildPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/functions/build"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.runtime != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "runtime", r.runtime, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "name", r.name, "")
	}
	var archiveLocalVarFormFileName string
	var archiveLocalVarFileName     string
	var archiveLocalVarFileBytes    []byte

	archiveLocalVarFormFileName = "archive"


	archiveLocalVarFile := r.archive

	if archiveLocalVarFile != nil {
		fbs, _ := io.ReadAll(archiveLocalVarFile)

		archiveLocalVarFileBytes = fbs
		archiveLocalVarFileName = archiveLocalVarFile.Name()
		archiveLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: archiveLocalVarFileBytes, fileName: archiveLocalVarFileName, formFileName: archiveLocalVarFormFileName})
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FunctionsApiV1FunctionsIdGetRequest struct {
	ctx context.Context
	ApiService FunctionsApi
	id string
}

func (r FunctionsApiV1FunctionsIdGetRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.V1FunctionsIdGetExecute(r)
}

/*
V1FunctionsIdGet Get a download link for the image of the given function

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The identifier of the function to upload.
 @return FunctionsApiV1FunctionsIdGetRequest
*/
func (a *FunctionsApiService) V1FunctionsIdGet(ctx context.Context, id string) FunctionsApiV1FunctionsIdGetRequest {
	return FunctionsApiV1FunctionsIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return string
func (a *FunctionsApiService) V1FunctionsIdGetExecute(r FunctionsApiV1FunctionsIdGetRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FunctionsApiService.V1FunctionsIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/functions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
